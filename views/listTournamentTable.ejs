<%- include('header') %>
<br/>


<div style="white-space: nowrap; width: <%= listTours.length * 380 %>px;">
<% listTours.forEach(function(people, num) { %>


    <div style="width: 180px; float: left; overflow: hidden; border: 0px;">
        <div>&nbsp;</div>
    <% people.forEach(function(person, num) { %>
        <div style="height: 27px; width: 180px; overflow: hidden; border-radius: 10px; border: 2px solid <%= person.color %>; margin-bottom: 2px;">
            &nbsp;<%= person.firstName %>  <%= person.lastName %>&nbsp;
            <div style="float: right; background: <%= person.color %>; width: 6px; height: 100%; border-radius: 50px;" >&nbsp;</div>
        </div>
    <% }); %>
    </div>

    <% if (listTours.length -1 > num) { %>
        <div style="width: 200px; float: left; overflow: hidden; border: 0px;">
            <div style="width: 200px; text-align: center;">
                <% if (listTours.length-3 < num) { %>
                    Final
                <% } else if (listTours.length-4 < num) { %>
                    1/2 Final
                <% } else { %>
                    Round # <%= num+1 %>
                <% }%>

            </div>
            <canvas id="myCanvas<%= num %>" width="200" height="<%= people.length*29 %>"></canvas>
        </div>
    <% } else { %>
        <div>
        <div>&nbsp;</div>
        <% people.forEach(function(person, num) { %>
            <div style="text-align:center; height: 27px; width: 27px; overflow: hidden; border-radius: 20px; border: 4px solid <%= person.color %>; margin-bottom: 2px;">
                <%= num+1 %>
            </div>
        <% }); %>

        </div>

    <% } %>

<% }); %>
</div>

<script>

function drawCurve(ctx, ptsa, color, tension, isClosed, numOfSegments, showPoints) {

  ctx.beginPath();

  drawLines(ctx, getCurvePoints(ptsa, tension, isClosed, numOfSegments));

  if (showPoints) {
    ctx.beginPath();
    for(var i=0;i<ptsa.length-1;i+=2)
      ctx.rect(ptsa[i] - 2, ptsa[i+1] - 2, 4, 4);
  }

  ctx.strokeStyle = color;
  ctx.stroke();
}

function generatePoints(x1, y1, x2, y2) {

    var xDiff = Math.round((x2 - x1) / 4);
    var yDiff = Math.round((y2 - y1) / 9);

    return [x1,y1, x1 + xDiff, y1 + yDiff, x2 - xDiff, y2 - yDiff,  x2,y2];

}

var tension = 1;

function drawField(ctx, personColor1, beginPosition1, personColor2, beginPosition2, field, winner, endPosition1, endPosition2) {

    var grd;

    var startTopPx = 15;

    postition1Px = (beginPosition1 * 29) + startTopPx;
    postition2Px = (beginPosition2 * 29) + startTopPx;

    var fieldStartTopPx = 40;

    var fieldCenter = field * 55 + fieldStartTopPx;

    drawCurve(ctx, generatePoints(0,postition1Px, 90, fieldCenter), personColor1);
    drawCurve(ctx, generatePoints(0,postition2Px, 90, fieldCenter), personColor2);

    // begin circle

    ctx.beginPath();
    ctx.arc(100,fieldCenter,15,0,1*Math.PI);
    ctx.strokeStyle = '#ffffff';
    grd = ctx.createRadialGradient(100,fieldCenter,17,100,fieldCenter,4);
    grd.addColorStop(0, '#FFFFFF');
    grd.addColorStop(1, personColor1);
    ctx.fillStyle = grd;
    ctx.fill();
    ctx.stroke();

    ctx.beginPath();
    ctx.arc(100,fieldCenter,15,1*Math.PI,2*Math.PI);
    ctx.strokeStyle = '#ffffff';
    grd = ctx.createRadialGradient(100,fieldCenter,17,100,fieldCenter,4);
    grd.addColorStop(0, '#FFFFFF');
    grd.addColorStop(1, personColor2);
    ctx.fillStyle = grd;
    ctx.fill();
    ctx.stroke();

    // winner

    if (typeof winner !== 'undefined') {

        var winnerColor;
        if (winner == beginPosition1)
            winnerColor = personColor1;
        else
            winnerColor = personColor2;

        ctx.beginPath();
        ctx.arc(100,fieldCenter,9,0,2*Math.PI);

        var grd = ctx.createRadialGradient(100,fieldCenter,10,100,fieldCenter,2);
        grd.addColorStop(0, '#FFFFFF');
        grd.addColorStop(1, winnerColor);

        // Fill with gradient
        ctx.fillStyle = grd;


        // ctx.fillStyle = winnerColor;
        ctx.fill();
        ctx.strokeStyle = '#ffffff';
        // ctx.font = "10px Arial";
        ctx.fillText(field + 1,97, fieldCenter + 3);
        ctx.stroke();

    } else {

        ctx.beginPath();
        ctx.arc(100,fieldCenter,9,0,2*Math.PI);

        // Fill with gradient
        ctx.fillStyle = '#ffffff';

        // ctx.fillStyle = winnerColor;
        ctx.fill();
        ctx.strokeStyle = '#ffffff';
        // ctx.font = "10px Arial";
        ctx.fillText(field + 1,97, fieldCenter + 3);
        ctx.stroke();

    }

     // circle text

    ctx.beginPath();
    ctx.fillStyle = '#000000';
    ctx.font = "10px Arial";
    if ((field+1) >= 10)
        ctx.fillText(field + 1,94, fieldCenter + 3);
    else
        ctx.fillText(field + 1,97, fieldCenter + 3);
    ctx.stroke();

    if (typeof endPosition1 !== 'undefined') {

        postition1Px = (endPosition1 * 29) + startTopPx;
        drawCurve(ctx, generatePoints(110,fieldCenter, 200, postition1Px), personColor1);

    }

    if (typeof endPosition2 !== 'undefined') {

        postition2Px = (endPosition2 * 29) + startTopPx;
        drawCurve(ctx, generatePoints(110,fieldCenter, 200, postition2Px), personColor2);

    }


}

var ctx;

// team A
<% listGames.forEach(function(groups, groupsNumber) { %>

    <% groups.forEach(function(group, fieldNumber) { %>

        ctx = document.getElementById("myCanvas<%= groupsNumber %>").getContext("2d");
        drawField(ctx, '<%= listTours[groupsNumber][group.gameBefore[0]].color %>', <%= group.gameBefore[0] %>, '<%= listTours[groupsNumber][group.gameBefore[1]].color %>', <%= group.gameBefore[1] %>, <%= fieldNumber %>, <%= group.winner %>, <%= group.gameAfter[0] %>, <%= group.gameAfter[1] %>);

    <% }); %>

<% }); %>



function getCurvePoints(pts, tension, isClosed, numOfSegments) {

  // use input value if provided, or use a default value
  tension = (typeof tension != 'undefined') ? tension : 0.5;
  isClosed = isClosed ? isClosed : false;
  numOfSegments = numOfSegments ? numOfSegments : 16;

  var _pts = [], res = [],  // clone array
      x, y,         // our x,y coords
      t1x, t2x, t1y, t2y,   // tension vectors
      c1, c2, c3, c4,       // cardinal points
      st, t, i;     // steps based on num. of segments

  // clone array so we don't change the original
  //
  _pts = pts.slice(0);

  // The algorithm require a previous and next point to the actual point array.
  // Check if we will draw closed or open curve.
  // If closed, copy end points to beginning and first points to end
  // If open, duplicate first points to befinning, end points to end
  if (isClosed) {
    _pts.unshift(pts[pts.length - 1]);
    _pts.unshift(pts[pts.length - 2]);
    _pts.unshift(pts[pts.length - 1]);
    _pts.unshift(pts[pts.length - 2]);
    _pts.push(pts[0]);
    _pts.push(pts[1]);
  }
  else {
    _pts.unshift(pts[1]);   //copy 1. point and insert at beginning
    _pts.unshift(pts[0]);
    _pts.push(pts[pts.length - 2]); //copy last point and append
    _pts.push(pts[pts.length - 1]);
  }

  // ok, lets start..

  // 1. loop goes through point array
  // 2. loop goes through each segment between the 2 pts + 1e point before and after
  for (i=2; i < (_pts.length - 4); i+=2) {
    for (t=0; t <= numOfSegments; t++) {

      // calc tension vectors
      t1x = (_pts[i+2] - _pts[i-2]) * tension;
      t2x = (_pts[i+4] - _pts[i]) * tension;

      t1y = (_pts[i+3] - _pts[i-1]) * tension;
      t2y = (_pts[i+5] - _pts[i+1]) * tension;

      // calc step
      st = t / numOfSegments;

      // calc cardinals
      c1 =   2 * Math.pow(st, 3)    - 3 * Math.pow(st, 2) + 1; 
      c2 = -(2 * Math.pow(st, 3)) + 3 * Math.pow(st, 2); 
      c3 =     Math.pow(st, 3)  - 2 * Math.pow(st, 2) + st; 
      c4 =     Math.pow(st, 3)  -     Math.pow(st, 2);

      // calc x and y cords with common control vectors
      x = c1 * _pts[i]  + c2 * _pts[i+2] + c3 * t1x + c4 * t2x;
      y = c1 * _pts[i+1]    + c2 * _pts[i+3] + c3 * t1y + c4 * t2y;

      //store points in array
      res.push(x);
      res.push(y);

    }
  }

  return res;
}

function drawLines(ctx, pts) {
  ctx.moveTo(pts[0], pts[1]);
  for(i=2;i<pts.length-1;i+=2) ctx.lineTo(pts[i], pts[i+1]);
}

</script>
<%- include('footer') %>